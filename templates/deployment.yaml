apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "diaspora.fullname" . }}
  labels:
    {{- include "diaspora.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "diaspora.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "diaspora.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "diaspora.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: postgresql-isready
        image: {{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}
        env:
          - name: POSTGRES_USER
            value: {{ .Values.postgresql.global.postgresql.postgresqlUsername | quote }}
        command:
          - "sh"
          - "-c"
          - {{ printf "until pg_isready -h %s-postgresql -U ${POSTGRES_USER} ; do sleep 2 ; done" .Release.Name }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          volumeMounts:
            - name: config
              mountPath: "/home/diaspora/diaspora/config/diaspora.yml"
              readOnly: true
              subPath: "diaspora.yml"
            - name: database
              mountPath: "/home/diaspora/diaspora/config/database.yml"
              readOnly: true
              subPath: "database.yml"
            - name: uploads
              mountPath: "/home/diaspora/diaspora/public/uploads"
              readOnly: false
              subPath: "uploads"
          livenessProbe:
            httpGet:
              path: /statistics
              port: http
              httpHeaders:
              - name: Host
                value: {{ required ".Values.host value is required " .Values.host }}

          readinessProbe:
            httpGet:
              path: /statistics
              port: http
              httpHeaders:
              - name: Host
                value: {{ required ".Values.host value is required " .Values.host }}

          startupProbe:
            httpGet:
              path: /statistics
              port: http
              httpHeaders:
              - name: Host
                value: {{ required ".Values.host value is required" .Values.host }}
            failureThreshold: 30
            periodSeconds: 10

          resources:
            {{- toYaml .Values.resources | nindent 12 }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}


      volumes:
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: {{ template "diaspora.fullname" . }}-config
            # An array of keys from the ConfigMap to create as files
            items:
              - key: "diaspora.yml"
                path: "diaspora.yml"
        - name: database
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: {{ template "diaspora.fullname" . }}-database
            # An array of keys from the ConfigMap to create as files
            items:
              - key: "database.yml"
                path: "database.yml"
        - name: uploads
        {{- if and .Values.persistence.enabled }}
          persistentVolumeClaim:
        {{- if .Values.persistence.existingClaim }}
            claimName: {{ .Values.persistence.existingClaim }}
        {{- else }}
            claimName: {{ template "diaspora.fullname" . }}-uploads
        {{ end }}
        {{- else }}
          emptyDir: {}
        {{- end -}}
